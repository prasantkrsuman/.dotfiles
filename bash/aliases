function update_bash(){
	ln -nfs ~/.dotfiles/git/gitconfig ~/.gitconfig
	ln -nfs ~/.dotfiles/git/githelpers ~/.githelpers
	ln -nfs ~/.dotfiles/vim/vimrc ~/.vimrc
	ln -nfs ~/.dotfiles/vim/vimrc.bundles ~/.vimrc.bundles
	ln -nfs ~/.dotfiles/tmux/tmux.conf ~/.tmux.conf
	ln -nfs ~/.dotfiles/pry/pryrc ~/.pryrc
	ln -nfs ~/.dotfiles/ag/agignore ~/.agignore

  if [ -f "~/.bashrc" ]; then
    source ~/.bashrc
  fi
  source ~/.bash_profile
}

alias update_hosts='dscacheutil -flushcache'
alias ubp='echo "Updating ~/.bash_profile..." && source ~/.bash_profile && update_bash'

source ~/.dotfiles/bash/git-completion.bash

# System
alias ls='ls -G'
alias ..='cd ..'
alias count_files='find ./ -maxdepth 1 -type d | while read -r dir; do printf "%s:\t" "$dir"; find "$dir" | wc -l; done'


# Processes
alias tu='top -o cpu'
alias tm='top -o cpu'

# Rails helpers
#
# Redirects port 80 on a Mac to 3000, allowing to run the server without root
alias railson80='sudo ipfw add 100 fwd 127.0.0.1,3000 tcp from any to any 80 in'

# Removes the redirection from port 80 to 3000
alias railsnoton80='sudo ipfw flush'
alias dbmigrate='echo "Running rake db:migrate db:test:prepare" && be rake db:migrate db:test:prepare'
alias dbmigratestatus='echo "Running rake db:migrate:status" && be rake db:migrate:status'
alias deploystaging='echo "Running be cap staging deploy:migrations" && be cap staging deploy:migrations'
alias deployprod="echo \"Running be 'cap production deploy:migrations'\" && be cap production deploy:migrations"
alias pushdeployprod="echo \"git pushing & Running 'be cap production deploy:migrations'\" && gpush && be cap production deploy:migrations"

# Git

alias g='git status'
alias ga='git add . --all && git status'
alias gb='git branch'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git log'
alias gamend='git commit --amend'
alias gdm='git diff master'

	# Commit pending changes and quote all args as message
	function gc(){ echo "Do you mean gco?"; }
	function gco(){ git commit -v -m "$*"; }
	function gch(){ git checkout $*; }

  # rmr = Rebase Master Rebase
	function rmr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

    echo Checking out master, rebasing and returning to $CURRENT_BRANCH...
		git checkout master
    git pull --rebase origin master
		git checkout $CURRENT_BRANCH
    git rebase master
	}

	function gfacepunch(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Face punching to origin $CURRENT_BRANCH...
		git push --force origin $CURRENT_BRANCH
	}

	function gpush(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pushing to origin $CURRENT_BRANCH...
		git push origin $CURRENT_BRANCH
	}

	function gpr(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling origin/$CURRENT_BRANCH, rebasing on it and fetching origin...
		git pull --rebase origin $CURRENT_BRANCH && git fetch origin
	}

	function gpul(){
		# Defines the current git branch
		export CURRENT_BRANCH=`git branch 2> /dev/null | grep -e ^* | sed -E  s/^\\\\\*\ \(.+\)$/\\\\\\1\\/`

		echo Pulling from origin $CURRENT_BRANCH...
		git pull origin $CURRENT_BRANCH
	}

	alias gpull=gpul

# Development
function spn(){ time rspec $*; }
function be(){ time bundle exec $*; }
function t(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH" && time bundle exec rspec $SPEC_PATH 2> >(grep -v CoreText 1>&2);
}
function tf(){
  SPEC_PATH='spec/'
  if [ ! -z "$*" ]; then
    SPEC_PATH="$*"
  fi
  echo "Running all tests in $SPEC_PATH and failing-fast" && time bundle exec rspec $SPEC_PATH --fail-fast 2> >(grep -v CoreText 1>&2);
}
function tsay(){ echo 'Running all tests in spec/ and then shouting at you' && time bundle exec rspec spec/ $* && say 'SPECS ARE DONE! GET BACK HERE!'; }

# checks the complexity of a file in HEAD~1
function floggg(){
  echo "Before:" && git show HEAD:$* | cat > ~/.flog_tmp && flog ~/.flog_tmp | grep "flog total" && rm ~/.flog_tmp;
  echo "";
  echo "After:" && flog $* | grep "flog total";
}

# Zeus
  alias zst='zeus start'
  alias zsts='(tmux send-keys -t 8 "zse" C-m &) && zst'
  alias zse='zeus server'
  alias zco='zeus console'
  function zra(){ zeus rake $*; }
  alias zro='zeus rake routes'
  alias zmi='zeus rake db:migrate db:test:prepare'
  alias zer='time zeus rspec spec/'
  function zrs(){ time zeus rspec $*; }
  alias zspl='time zeus rspec spec/lib/'
  alias zspc='time zeus rspec spec/controllers/'
  alias zspm='time zeus rspec spec/models/'
  alias zspa='time zeus rspec spec/acceptance/'
  alias zspr='time zeus rspec spec/request/'

# Spring gem
  alias sse='spring rails server'
  alias sco='spring rails console'
  function sra(){ spring rake $*; }
  alias sro='spring rake routes'
  alias smi='spring rake db:migrate db:test:prepare'
  alias ser='time spring rspec spec/'

# Tmux
#
# execute_in_all_panes "echo OH HAI"
function tmuxa(){ tmux attach -t $*; }
function tmuxn(){ tmux new-session -s $*; }
function tmuxk(){ tmux kill-session -t $*; }


# General commands
function grepp(){
  grep -Rni --exclude=".//db/data*" --exclude=".//tmp*" --exclude=".//vendor*" --exclude=".//coverage*" --exclude=".//log*" --exclude=".//tag*" --exclude=".//spec*/vcr*" --exclude=".//spec*/cassett*" --exclude=".//public/*.js*" --exclude=".//.*" --exclude="./db/data*" --exclude="./tmp*" --exclude="./vendor*" --exclude="./coverage*" --exclude="./log*" --exclude="./tag*" --exclude="./spec*/cassett*" --exclude="./public/*.js*" --exclude="./.*" "$*" ./
}

function findd(){
  find . -ipath "*$**";
}

function superkill(){
  kill -9 `ps aux | grep $* | awk '{print $2}'`
}

function ,f() {
  vim $(git ls-files|selecta)
}

function ffiles() {
  find . -name \* -print | selecta
}

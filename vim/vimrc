" Copy or symlink this file to ~/.vimrc

" avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0

set nocompatible               " be iMproved
filetype off                   " required!

" Vundle
  set rtp+=~/.vim/bundle/Vundle.vim/
  call vundle#begin()

  if filereadable(expand("~/.vimrc.bundles"))
    source ~/.vimrc.bundles
  endif

  call vundle#end()               " required
  filetype plugin indent on       " required

" Configuration
set tags=tags                     " ctags

syntax on                         " Turn on syntax highlighting.
set synmaxcol=200
filetype plugin indent on         " Turn on file type detection.

runtime macros/matchit.vim        " Load the matchit plugin.

set pastetoggle=<F10>
set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.
set cursorline

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set number                        " Show line numbers.
set ruler                         " Show cursor position.

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set wrap                          " Turn on line wrapping.
set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup                 " And again.
set directory=/var/tmp            " Keep swap files in one location

" UNCOMMENT TO USE
set tabstop=2                    " Global tab width.
set shiftwidth=2                 " And again, related.
set expandtab                    " Use spaces instead of tabs

set laststatus=2                  " Show the status line all the time
" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

set foldmethod=manual
set foldlevelstart=99
set foldlevel=99
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.ejs set filetype=html
au BufRead,BufNewFile *.md setlocal textwidth=80

hi CursorLineNR cterm=bold
augroup CLNRSet
  autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermfg=green
augroup END

" "Theme
colorscheme alex_ir_black
"railscasts


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" DEFAULT BEHAVIORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" git gutter plugin
let g:gitgutter_enabled = 1

" zencoding plugin
 let g:user_zen_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'erb' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \}

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = 'tmp$\|logs\|vendor/assets\|vendor/bundle\|vendor/plugins\|spec/vcr\|public/uploads\|public/themes/cloud\|spec/cassett\|\.git\|cassett\|/.git\|coverage\|.DS_STORE\|node_modules\|bower_'

let g:ctrlp_map = '<c-p>'
"let g:ctrlp_user_command = 'find %s -type f'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM SHORTCUTS & KEY BINDINGS
"
" For tests & specs custom functions and key bindings, look at the respective
" section below
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  set timeoutlen=200
  let mapleader = ","

  " save by pressing ,s instead of :w
  map <Leader>s <ESC>:w<CR>
  map <Leader>be :BufExplorer<CR>

  " Prevents Vim from scrolling when splitting the window horizontally.
    nnoremap <C-W>s Hmx`` \|:split<CR>`xzt``

    function! SaveAndReloadVimFile()
      exec ":write"
      if match(expand('%'), ".vim") >= 1
        exec ":so %"
      endif
    endfunction
  " Spacebar saves
   " nnoremap <Space> :w<cr>
    nnoremap <Space> :call SaveAndReloadVimFile()<cr>

  " ]p to paste and indent code automatically
    nnoremap ]p p=`]

  " Motion for "next object". For example, "din(" would go to the next "()" pair
  " and delete its contents.
    onoremap an :<c-u>call <SID>NextTextObject('a')<cr>
    xnoremap an :<c-u>call <SID>NextTextObject('a')<cr>
    onoremap in :<c-u>call <SID>NextTextObject('i')<cr>
    xnoremap in :<c-u>call <SID>NextTextObject('i')<cr>

    function! s:NextTextObject(motion)
      echo
      let c = nr2char(getchar())
      exe "normal! f".c."v".a:motion.c
    endfunction

  " Folding
    nnoremap <leader>1 :set foldlevel=1<cr>
    nnoremap <leader>2 :set foldlevel=2<cr>
    nnoremap <leader>3 :set foldlevel=3<cr>
    nnoremap <leader>4 :set foldlevel=4<cr>
    nnoremap <leader>9 :set foldlevel=9<cr>

  " Tab mappings.
    map <leader>tt :tabnew<cr>
    map <leader>te :tabedit
    map <leader>tc :tabclose<cr>
    map <leader>to :tabonly<cr>
    map <leader>tn :tabnext<cr>
    map <leader>tp :tabprevious<cr>
    map <leader>tf :tabfirst<cr>
    map <leader>tl :tablast<cr>
    map <leader>tm :tabmove

  " Enter clears search highlight
  " nmap <CR> :nohlsearch<CR>

  " When pasting in visual mode, doesn't replace current register
  " vnoremap p "_dP
  " I haven't found how to hide this function (yet)
  function! RestoreRegister()
    let @" = s:restore_reg
    return ''
  endfunction

  function! s:Repl()
      let s:restore_reg = @"
      return "p@=RestoreRegister()\<cr>"
  endfunction

  " this supports "rp that replaces the selection by the contents of @r
  vnoremap <silent> <expr> p <sid>Repl()


  " Goes to the end of the line (pressing shift+4 is annoying)
  nmap 44 $
  vmap 44 $h

  function! SearchCurrentPath()
    let l:word = expand("<cword>")
    call feedkeys(":CtrlP\<CR>".l:word, "t")
  endfunction
  nnoremap <leader>g :call SearchCurrentPath()<cr>

  " Tab becomes Esc
  " inoremap <m-i> <tab>
  " nnoremap <tab> <esc>
  " vnoremap <tab> <esc>gV
  " inoremap <tab> <esc>`^

  " Updates CTags
  map <F5> :exec "!ctags -R --exclude=.git --exclude=vendor/bundle"<CR>

  function! PropheticTag()
    if v:count1 == "1"
      :echo "Not prophetic"
      return ""
    endif

    execute "normal! " . v:count1 . "G"
    execute ":tag '" . expand("<cword>") . "'"
    return ""
  endfunction

  "nnoremap <C-[> :<C-U>call PropheticTag()<CR>

  nmap <leader>b :so $MYVIMRC<CR>

  " Resizing windows
  nnoremap <C-h> :vertical resize +5<cr>
  nnoremap <C-l> :vertical resize -5<cr>
  nnoremap <C-k> :resize +5<cr>
  nnoremap <C-j> :resize -5<cr>

  inoremap  <Up>     <NOP>
  inoremap  <Down>   <NOP>
  inoremap  <Left>   <NOP>
  inoremap  <Right>  <NOP>
  noremap   <Up>     <NOP>
  noremap   <Down>   <NOP>
  noremap   <Left>   <NOP>
  noremap   <Right>  <NOP>

  " When you've writen : (colon), press %% very fast and it'll write the current
  " file's directory
  cnoremap %% <C-R>=expand('%:h').'/'<cr>
  map <leader>e :edit %%
  map <leader>v :view %%

  " RUBY & RAILS
    " Keeps current file in on side, and its test file in the other
    " (depends on Rails.vim)
    map <leader>A :on<CR>\|:vsplit<CR>\|<c-w>l\|:A<CR>

    " :A is from rails.vim plugin
    nnoremap <Leader>a :A<CR>

    " deletes the remaining chars from a string
    nnoremap <Leader>ds vf"hd

  " CTRLP
    map <leader>ga :CtrlPClearCache<cr>\|:CtrlP app/assets<cr>
    map <leader>gv :CtrlPClearCache<cr>\|:CtrlP app/views<cr>
    map <leader>gc :CtrlPClearCache<cr>\|:CtrlP app/controllers<cr>
    map <leader>gm :CtrlPClearCache<cr>\|:CtrlP app/models<cr>
    map <leader>gl :CtrlPClearCache<cr>\|:CtrlP lib<cr>
    map <leader>gs :CtrlPClearCache<cr>\|:CtrlP spec<cr>
    map <leader>gu :CtrlPClearCache<cr>\|:CtrlP spec/unit<cr>
    map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
    map <leader>f :CtrlPClearCache<cr>\|:CtrlP<cr>
    map <leader>F :CtrlPClearCache<cr>\|:CtrlP %%<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM COMMANDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SetCtrlPPathTheSameAsVim()
  let new_dir = expand('%:h')
  exec ':cd ' . new_dir
  let g:ctrlp_working_path_mode=''
  exec ':echo "Changed CtrlP and Vim path to current folder."'
endfunction

" When you go to another project inside of a Rails project (e.g Ember project
" in app/assets/javascript/my_project), CtrlP still uses ./ as root. By typing
" this command, CtrlP will :cd into this internal project.
command! CtrlPVimPath call SetCtrlPPathTheSameAsVim()
map <leader>p :call SetCtrlPPathTheSameAsVim()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

  " Rename current file
  function! RenameFile()
    let old_name = expand('%')
    let new_name = input('Renaming file. New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
      exec ':saveas ' . new_name
      exec ':silent !rm ' . old_name
      redraw!
    endif
  endfunction

  " Copy current file to a new location
  function! CopyFile()
    let old_name = expand('%')
    let new_name = input('Copying file. New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
      exec ':saveas ' . new_name
      redraw!
    endif
  endfunction

  map <leader>n :call RenameFile()<cr>
  map <leader>c :call CopyFile()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TESTS & SPECS FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  nnoremap <cr> <ESC>:w<CR>\|:call RunTestFile()<cr>
  map <leader>t :call RunTestFile()<cr>
  map <leader>r :call RunNearestTest()<cr>
  map <leader>bt <ESC>:w<CR>\|:!bundle exec rspec --color --no-drb %<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ENVIRONMENT CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
  " taken from http://vim.wikia.com/wiki/Highlight_unwanted_spaces
  highlight RedundantSpaces ctermbg=red guibg=red
  match RedundantSpaces /\s\+$/
  autocmd BufWinEnter * match RedundantSpaces /\s\+$/
  autocmd InsertEnter * match RedundantSpaces /\s\+\%#\@<!$/
  autocmd InsertLeave * match RedundantSpaces /\s\+$/
  autocmd BufWinLeave * call clearmatches()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" INDENTING WHEN PASTING
" Paste and indent if we're at the beginning of a line. Else, just paste.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PasteAndIndent()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    "execute ":normal! p=`]"
    execute ":echo 1111"
    execute ":normal! p"
  else
    execute ":echo 2222"
    execute ":normal! p"
  endif
endfunction

nnoremap p :call PasteAndIndent()<cr>

" ]p to paste and indent code automatically
" nnoremap ]p p=`]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
" imap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

"highlight ColorColumn ctermbg=7
set colorcolumn=80

